<html>
<head>
<title>btree_solveoverflow.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> <font color=#008000>//关键码插入后若节点上溢，则做节点分裂处理</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span><font color=#0000FF>void</font> BTree<font color=#AA5500>&lt;</font>T&gt;::solveOverflow( BTNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> v ) {
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>   <font color=#0000FF>while</font> ( _m <font color=#AA5500>&lt;</font>= v-<font color=#AA5500>&gt;</font>key.size() ) { <font color=#008000>//除非当前节点并未上溢</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span>      Rank s <font color=#AA5500>=</font> _m / 2; <font color=#008000>//轴点（此时应有_m = key.size() = child.size() - 1）</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>      BTNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> u <font color=#AA5500>=</font> <font color=#0000FF>new</font> BTNode<font color=#AA5500>&lt;</font>T&gt;(); <font color=#008000>//注意：新节点已有一个空孩子</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>      <font color=#0000FF>for</font> ( Rank j <font color=#AA5500>=</font> 0; j <font color=#AA5500>&lt;</font> _m <font color=#AA5500>-</font> s <font color=#AA5500>-</font> 1; j++ ) { <font color=#008000>// v右侧_m-s-1个孩子及关键码分裂为右侧节点u</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>         u-<font color=#AA5500>&gt;</font>child.insert( j, v-<font color=#AA5500>&gt;</font>child.remove( s <font color=#AA5500>+</font> 1 ) ); <font color=#008000>//逐个移动效率低</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>         u-<font color=#AA5500>&gt;</font>key.insert( j, v-<font color=#AA5500>&gt;</font>key.remove( s <font color=#AA5500>+</font> 1 ) ); <font color=#008000>//此策略可改进</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>      }
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>      u-<font color=#AA5500>&gt;</font>child<font color=#AA5500>[</font>_m <font color=#AA5500>-</font> s <font color=#AA5500>-</font> 1<font color=#AA5500>]</font> <font color=#AA5500>=</font> v-<font color=#AA5500>&gt;</font>child.remove( s <font color=#AA5500>+</font> 1 ); <font color=#008000>//移动v最靠右的孩子</font>
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>      <font color=#0000FF>if</font> ( u-<font color=#AA5500>&gt;</font>child<font color=#AA5500>[</font>0<font color=#AA5500>]</font> ) <font color=#008000>//若u的孩子们非空，则</font>
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>         <font color=#0000FF>for</font> ( Rank j <font color=#AA5500>=</font> 0; j <font color=#AA5500>&lt;</font> _m <font color=#AA5500>-</font> s; j++ ) <font color=#008000>//令它们的父节点统一</font>
<span class="line_num"><font color=#e8e8e8>00</font>13 </span>            u-<font color=#AA5500>&gt;</font>child<font color=#AA5500>[</font>j<font color=#AA5500>]</font><font color=#AA5500>-</font><font color=#AA5500>&gt;</font>parent <font color=#AA5500>=</font> u; <font color=#008000>//指向u</font>
<span class="line_num"><font color=#e8e8e8>00</font>14 </span>      BTNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> p <font color=#AA5500>=</font> v-<font color=#AA5500>&gt;</font>parent; <font color=#008000>// v当前的父节点p</font>
<span class="line_num"><font color=#e8e8e8>00</font>15 </span>      <font color=#0000FF>if</font> ( !p ) { _root <font color=#AA5500>=</font> p <font color=#AA5500>=</font> <font color=#0000FF>new</font> BTNode<font color=#AA5500>&lt;</font>T&gt;(); p-<font color=#AA5500>&gt;</font>child<font color=#AA5500>[</font>0<font color=#AA5500>]</font> <font color=#AA5500>=</font> v; v-<font color=#AA5500>&gt;</font>parent <font color=#AA5500>=</font> p; } <font color=#008000>//若p空则创建之</font>
<span class="line_num"><font color=#e8e8e8>00</font>16 </span>      Rank r <font color=#AA5500>=</font> 1 <font color=#AA5500>+</font> p-<font color=#AA5500>&gt;</font>key.search( v-<font color=#AA5500>&gt;</font>key<font color=#AA5500>[</font>0<font color=#AA5500>]</font> ); <font color=#008000>// p中指向v的指针的秩</font>
<span class="line_num"><font color=#e8e8e8>00</font>17 </span>      p-<font color=#AA5500>&gt;</font>key.insert( r, v-<font color=#AA5500>&gt;</font>key.remove( s ) ); <font color=#008000>//轴点关键码上升</font>
<span class="line_num"><font color=#e8e8e8>00</font>18 </span>      p-<font color=#AA5500>&gt;</font>child.insert( r <font color=#AA5500>+</font> 1, u ); u-<font color=#AA5500>&gt;</font>parent <font color=#AA5500>=</font> p; <font color=#008000>//新节点u与父节点p互联</font>
<span class="line_num"><font color=#e8e8e8>00</font>19 </span>      v <font color=#AA5500>=</font> p; <font color=#008000>//上升一层，如有必要则继续分裂――至多O(logn)层</font>
<span class="line_num"><font color=#e8e8e8>00</font>20 </span>   } <font color=#008000>//while</font>
<span class="line_num"><font color=#e8e8e8>00</font>21 </span>}
</b></p></pre>
</body>
</html>

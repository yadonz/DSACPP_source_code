<html>
<head>
<title>bst_rotateat.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#008000>/******************************************************************************************</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span><font color=#008000> * BST节点旋转变换统一算法（3节点 + 4子树），返回调整之后局部子树根节点的位置</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span><font color=#008000> * 注意：尽管子树根会正确指向上层节点（如果存在），但反向的联接须由上层函数完成</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span><font color=#008000> ******************************************************************************************/</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> BST<font color=#AA5500>&lt;</font>T&gt;::rotateAt( BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> v ) { <font color=#008000>//v为非空孙辈节点</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>   BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> p <font color=#AA5500>=</font> v-<font color=#AA5500>&gt;</font>parent; BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> g <font color=#AA5500>=</font> p-<font color=#AA5500>&gt;</font>parent; <font color=#008000>//视v、p和g相对位置分四种情况</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>   <font color=#0000FF>if</font> ( IsLChild( <font color=#AA5500>*</font>p ) ) <font color=#008000>// zig</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>      <font color=#0000FF>if</font> ( IsLChild( <font color=#AA5500>*</font>v ) ) { <font color=#008000>/* zig-zig */</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>         p-<font color=#AA5500>&gt;</font>parent <font color=#AA5500>=</font> g-<font color=#AA5500>&gt;</font>parent; <font color=#008000>//向上联接</font>
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>         <font color=#0000FF>return</font> connect34( v, p, g, v-<font color=#AA5500>&gt;</font>lc, v-<font color=#AA5500>&gt;</font>rc, p-<font color=#AA5500>&gt;</font>rc, g-<font color=#AA5500>&gt;</font>rc );
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>      } <font color=#0000FF>else</font> { <font color=#008000>/* zig-zag */</font>
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>         v-<font color=#AA5500>&gt;</font>parent <font color=#AA5500>=</font> g-<font color=#AA5500>&gt;</font>parent; <font color=#008000>//向上联接</font>
<span class="line_num"><font color=#e8e8e8>00</font>13 </span>         <font color=#0000FF>return</font> connect34( p, v, g, p-<font color=#AA5500>&gt;</font>lc, v-<font color=#AA5500>&gt;</font>lc, v-<font color=#AA5500>&gt;</font>rc, g-<font color=#AA5500>&gt;</font>rc );
<span class="line_num"><font color=#e8e8e8>00</font>14 </span>      }
<span class="line_num"><font color=#e8e8e8>00</font>15 </span>   <font color=#0000FF>else</font> <font color=#008000>// zag</font>
<span class="line_num"><font color=#e8e8e8>00</font>16 </span>      <font color=#0000FF>if</font> ( IsRChild( <font color=#AA5500>*</font>v ) ) { <font color=#008000>/* zag-zag */</font>
<span class="line_num"><font color=#e8e8e8>00</font>17 </span>         p-<font color=#AA5500>&gt;</font>parent <font color=#AA5500>=</font> g-<font color=#AA5500>&gt;</font>parent; <font color=#008000>//向上联接</font>
<span class="line_num"><font color=#e8e8e8>00</font>18 </span>         <font color=#0000FF>return</font> connect34( g, p, v, g-<font color=#AA5500>&gt;</font>lc, p-<font color=#AA5500>&gt;</font>lc, v-<font color=#AA5500>&gt;</font>lc, v-<font color=#AA5500>&gt;</font>rc );
<span class="line_num"><font color=#e8e8e8>00</font>19 </span>      } <font color=#0000FF>else</font> { <font color=#008000>/* zag-zig */</font>
<span class="line_num"><font color=#e8e8e8>00</font>20 </span>         v-<font color=#AA5500>&gt;</font>parent <font color=#AA5500>=</font> g-<font color=#AA5500>&gt;</font>parent; <font color=#008000>//向上联接</font>
<span class="line_num"><font color=#e8e8e8>00</font>21 </span>         <font color=#0000FF>return</font> connect34( g, v, p, g-<font color=#AA5500>&gt;</font>lc, v-<font color=#AA5500>&gt;</font>lc, v-<font color=#AA5500>&gt;</font>rc, p-<font color=#AA5500>&gt;</font>rc );
<span class="line_num"><font color=#e8e8e8>00</font>22 </span>      }
<span class="line_num"><font color=#e8e8e8>00</font>23 </span>}
</b></p></pre>
</body>
</html>

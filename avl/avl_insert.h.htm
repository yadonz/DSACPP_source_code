<html>
<head>
<title>avl_insert.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> AVL<font color=#AA5500>&lt;</font>T&gt;::insert( <font color=#0000FF>const</font> T& e ) { <font color=#008000>//将关键码e插入AVL树中</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span>   BinNodePosi<font color=#AA5500>&lt;</font>T&gt;& x <font color=#AA5500>=</font> search( e ); <font color=#0000FF>if</font> ( x ) <font color=#0000FF>return</font> x; <font color=#008000>//确认目标节点不存在</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>   BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> xx <font color=#AA5500>=</font> x <font color=#AA5500>=</font> <font color=#0000FF>new</font> BinNode<font color=#AA5500>&lt;</font>T&gt;( e, _hot ); _size++; <font color=#008000>//创建新节点x</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span><font color=#008000>// 此时，x的父亲_hot若增高，则其祖父有可能失衡</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>   <font color=#0000FF>for</font> ( BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> g <font color=#AA5500>=</font> _hot; g; g <font color=#AA5500>=</font> g-<font color=#AA5500>&gt;</font>parent ) <font color=#008000>//从x之父出发向上，逐层检查各代祖先g</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>      <font color=#0000FF>if</font> ( !AvlBalanced( <font color=#AA5500>*</font>g ) ) { <font color=#008000>//一旦发现g失衡，则（采用“3 + 4”算法）使之复衡，并将子树</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>         FromParentTo( <font color=#AA5500>*</font>g ) <font color=#AA5500>=</font> rotateAt( tallerChild( tallerChild( g ) ) ); <font color=#008000>//重新接入原树</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>         <font color=#0000FF>break</font>; <font color=#008000>//局部子树复衡后，高度必然复原；其祖先亦必如此，故调整结束</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>      } <font color=#0000FF>else</font> <font color=#008000>//否则（g仍平衡）</font>
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>         updateHeight( g ); <font color=#008000>//只需更新其高度（注意：即便g未失衡，高度亦可能增加）</font>
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>   <font color=#0000FF>return</font> xx; <font color=#008000>//返回新节点位置</font>
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>} <font color=#008000>//无论e是否存在于原树中，总有AVL::insert(e)-&gt;data == e</font>
</b></p></pre>
</body>
</html>

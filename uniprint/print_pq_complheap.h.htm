<html>
<head>
<title>print_pq_complheap.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#800080>#define ROOT 0</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span><font color=#800080>#define L_CHILD 1</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span><font color=#800080>#define R_CHILD -1*L_CHILD</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span><font color=#008000>/******************************************************************************************</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span><font color=#008000> * 打印输出PQ_ComplHeap</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span><font color=#008000> ******************************************************************************************/</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> <font color=#008000>//元素类型</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span><font color=#0000FF>void</font> UniPrint::p ( PQ_ComplHeap<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> & pq ) { <font color=#008000>//引用</font>
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>   printf ( <font color=#FF00FF>"%s[%d]*%d:\n"</font>, <font color=#0000FF>typeid</font> ( pq ).name(), (<font color=#0000FF>int</font>) &pq, pq.size() ); <font color=#008000>//基本信息</font>
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>   <font color=#0000FF>int</font> branchType<font color=#AA5500>[</font>256]; <font color=#008000>//最深256层 &lt;= 2^256 = 1.16*10^77</font>
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>   printComplHeap ( ( Vector<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> & ) pq, pq.size(), 0, 0, ROOT, branchType ); <font color=#008000>//树状结构</font>
<span class="line_num"><font color=#e8e8e8>00</font>13 </span>   printf ( <font color=#FF00FF>"\n"</font> );
<span class="line_num"><font color=#e8e8e8>00</font>14 </span>}
<span class="line_num"><font color=#e8e8e8>00</font>15 </span>
<span class="line_num"><font color=#e8e8e8>00</font>16 </span><font color=#008000>/******************************************************************************************</font>
<span class="line_num"><font color=#e8e8e8>00</font>17 </span><font color=#008000> * 递归打印输出</font>
<span class="line_num"><font color=#e8e8e8>00</font>18 </span><font color=#008000> ******************************************************************************************/</font>
<span class="line_num"><font color=#e8e8e8>00</font>19 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> <font color=#008000>//元素类型</font>
<span class="line_num"><font color=#e8e8e8>00</font>20 </span><font color=#0000FF>static</font> <font color=#0000FF>void</font> printComplHeap ( Vector<font color=#AA5500>&lt;</font>T&gt;& elem, <font color=#0000FF>int</font> n, <font color=#0000FF>int</font> k, <font color=#0000FF>int</font> depth, <font color=#0000FF>int</font> type, <font color=#0000FF>int</font><font color=#AA5500>*</font> bType ) {
<span class="line_num"><font color=#e8e8e8>00</font>21 </span>   <font color=#0000FF>if</font> ( k &gt;= n ) <font color=#0000FF>return</font>; <font color=#008000>//递归基</font>
<span class="line_num"><font color=#e8e8e8>00</font>22 </span>   bType<font color=#AA5500>[</font>depth<font color=#AA5500>]</font> <font color=#AA5500>=</font> type;
<span class="line_num"><font color=#e8e8e8>00</font>23 </span>   printComplHeap ( elem, n, RChild ( k ), depth <font color=#AA5500>+</font> 1, R_CHILD, bType ); <font color=#008000>//右子树（在上）</font>
<span class="line_num"><font color=#e8e8e8>00</font>24 </span>   print ( elem<font color=#AA5500>[</font>k<font color=#AA5500>]</font> ); ( 0 <font color=#AA5500>&lt;</font> k ) && ( elem<font color=#AA5500>[</font>Parent ( k ) <font color=#AA5500>]</font> <font color=#AA5500>&lt;</font> elem<font color=#AA5500>[</font>k<font color=#AA5500>]</font> ) ? printf ( <font color=#FF00FF>"X"</font> ) : printf ( <font color=#FF00FF>" "</font> ); printf ( <font color=#FF00FF>"*"</font> );
<span class="line_num"><font color=#e8e8e8>00</font>25 </span>   <font color=#0000FF>for</font> ( <font color=#0000FF>int</font> i <font color=#AA5500>=</font> 0; i <font color=#AA5500>&lt;</font> depth; i++ ) <font color=#008000>//根据相邻各层</font>
<span class="line_num"><font color=#e8e8e8>00</font>26 </span>      <font color=#0000FF>if</font> ( bType<font color=#AA5500>[</font>i<font color=#AA5500>]</font> <font color=#AA5500>+</font> bType<font color=#AA5500>[</font>i<font color=#AA5500>+</font>1<font color=#AA5500>]</font> ) <font color=#008000>//的拐向是否一致，即可确定</font>
<span class="line_num"><font color=#e8e8e8>00</font>27 </span>         printf ( <font color=#FF00FF>"      "</font> ); <font color=#008000>//是否应该</font>
<span class="line_num"><font color=#e8e8e8>00</font>28 </span>      <font color=#0000FF>else</font>  printf ( <font color=#FF00FF>"│    "</font> ); <font color=#008000>//打印横线</font>
<span class="line_num"><font color=#e8e8e8>00</font>29 </span>   <font color=#0000FF>switch</font> ( type ) {
<span class="line_num"><font color=#e8e8e8>00</font>30 </span>      <font color=#0000FF>case</font>  R_CHILD  :  printf ( <font color=#FF00FF>"┌─"</font> );  <font color=#0000FF>break</font>;
<span class="line_num"><font color=#e8e8e8>00</font>31 </span>      <font color=#0000FF>case</font>  L_CHILD  :  printf ( <font color=#FF00FF>"└─"</font> );  <font color=#0000FF>break</font>;
<span class="line_num"><font color=#e8e8e8>00</font>32 </span>      <font color=#0000FF>default</font>        :  printf ( <font color=#FF00FF>"──"</font> );  <font color=#0000FF>break</font>; <font color=#008000>//root</font>
<span class="line_num"><font color=#e8e8e8>00</font>33 </span>   }
<span class="line_num"><font color=#e8e8e8>00</font>34 </span>   print ( elem<font color=#AA5500>[</font>k<font color=#AA5500>]</font> ); ( 0 <font color=#AA5500>&lt;</font> k ) && ( elem<font color=#AA5500>[</font>Parent ( k ) <font color=#AA5500>]</font> <font color=#AA5500>&lt;</font> elem<font color=#AA5500>[</font>k<font color=#AA5500>]</font> ) ? printf ( <font color=#FF00FF>"X"</font> ) : printf ( <font color=#FF00FF>" "</font> ); printf ( <font color=#FF00FF>"\n"</font> );
<span class="line_num"><font color=#e8e8e8>00</font>35 </span>   printComplHeap ( elem, n, LChild ( k ), depth <font color=#AA5500>+</font> 1, L_CHILD, bType ); <font color=#008000>//左子树（在下）</font>
<span class="line_num"><font color=#e8e8e8>00</font>36 </span>}
</b></p></pre>
</body>
</html>

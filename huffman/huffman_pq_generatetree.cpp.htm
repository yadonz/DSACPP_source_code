<html>
<head>
<title>huffman_pq_generatetree.cpp</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#008000>/******************************************************************************************</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span><font color=#008000> * Huffman树构造算法：对传入的Huffman森林forest逐步合并，直到成为一棵树</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span><font color=#008000> ******************************************************************************************</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span><font color=#008000> * forest基于优先级队列实现，此算法适用于符合PQ接口的任何实现方式</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span><font color=#008000> * 为Huffman_PQ_List、Huffman_PQ_ComplHeap和Huffman_PQ_LeftHeap共用</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span><font color=#008000> * 编译前对应工程只需设置相应标志：DSA_PQ_List、DSA_PQ_ComplHeap或DSA_PQ_LeftHeap</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span><font color=#008000> ******************************************************************************************/</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>HuffTree<font color=#AA5500>*</font> generateTree ( HuffForest<font color=#AA5500>*</font> forest ) {
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>   <font color=#0000FF>while</font> ( 1 <font color=#AA5500>&lt;</font> forest-<font color=#AA5500>&gt;</font>size() ) {
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>      HuffTree<font color=#AA5500>*</font> s1 <font color=#AA5500>=</font> forest-<font color=#AA5500>&gt;</font>delMax(); HuffTree<font color=#AA5500>*</font> s2 <font color=#AA5500>=</font> forest-<font color=#AA5500>&gt;</font>delMax();
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>      HuffTree<font color=#AA5500>*</font> s <font color=#AA5500>=</font> <font color=#0000FF>new</font> HuffTree();
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>      s-<font color=#AA5500>&gt;</font>insert ( HuffChar ( <font color=#FF00FF>'&#94;'</font>, s1-<font color=#AA5500>&gt;</font>root()<font color=#AA5500>-</font><font color=#AA5500>&gt;</font>data.weight <font color=#AA5500>+</font> s2-<font color=#AA5500>&gt;</font>root()<font color=#AA5500>-</font><font color=#AA5500>&gt;</font>data.weight ) );
<span class="line_num"><font color=#e8e8e8>00</font>13 </span>      s-<font color=#AA5500>&gt;</font>attach ( s1, s-<font color=#AA5500>&gt;</font>root() ); s-<font color=#AA5500>&gt;</font>attach ( s-<font color=#AA5500>&gt;</font>root(), s2 );
<span class="line_num"><font color=#e8e8e8>00</font>14 </span>      forest-<font color=#AA5500>&gt;</font>insert ( s ); <font color=#008000>//将合并后的Huffman树插回Huffman森林</font>
<span class="line_num"><font color=#e8e8e8>00</font>15 </span>   }
<span class="line_num"><font color=#e8e8e8>00</font>16 </span>   HuffTree<font color=#AA5500>*</font> tree <font color=#AA5500>=</font> forest-<font color=#AA5500>&gt;</font>delMax(); <font color=#008000>//至此，森林中的最后一棵树</font>
<span class="line_num"><font color=#e8e8e8>00</font>17 </span>   <font color=#0000FF>return</font> tree; <font color=#008000>//即全局Huffman编码树</font>
<span class="line_num"><font color=#e8e8e8>00</font>18 </span>}
</b></p></pre>
</body>
</html>

<html>
<head>
<title>huffman_generatetable.cpp</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>static</font> <font color=#0000FF>void</font> generateCT <font color=#008000>//通过遍历获取各字符的编码</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span>   ( Bitmap<font color=#AA5500>*</font> code, <font color=#0000FF>int</font> length, HuffTable<font color=#AA5500>*</font> table, BinNodePosi <font color=#AA5500>&lt;</font>HuffChar<font color=#AA5500>&gt;</font> v ) {
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>   <font color=#0000FF>if</font> ( IsLeaf ( <font color=#AA5500>*</font>v ) ) <font color=#008000>//若是叶节点（还有多种方法可以判断）</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span>      {  table-<font color=#AA5500>&gt;</font>put ( v-<font color=#AA5500>&gt;</font>data.ch, code-<font color=#AA5500>&gt;</font>bits2string ( length ) ); <font color=#0000FF>return</font>;  }
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>   <font color=#0000FF>if</font> ( HasLChild ( <font color=#AA5500>*</font>v ) ) <font color=#008000>//Left = 0</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>      { code-<font color=#AA5500>&gt;</font>clear ( length ); generateCT ( code, length <font color=#AA5500>+</font> 1, table, v-<font color=#AA5500>&gt;</font>lc ); }
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>   <font color=#0000FF>if</font> ( HasRChild ( <font color=#AA5500>*</font>v ) ) <font color=#008000>//Right = 1</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>      { code-<font color=#AA5500>&gt;</font>set ( length ); generateCT ( code, length <font color=#AA5500>+</font> 1, table, v-<font color=#AA5500>&gt;</font>rc ); }
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>}
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>HuffTable<font color=#AA5500>*</font> generateTable ( HuffTree<font color=#AA5500>*</font> tree ) { <font color=#008000>//将各字符编码统一存入以散列表实现的编码表中</font>
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>   HuffTable<font color=#AA5500>*</font> table <font color=#AA5500>=</font> <font color=#0000FF>new</font> HuffTable; Bitmap<font color=#AA5500>*</font> code <font color=#AA5500>=</font> <font color=#0000FF>new</font> Bitmap;
<span class="line_num"><font color=#e8e8e8>00</font>13 </span>   generateCT ( code, 0, table, tree-<font color=#AA5500>&gt;</font>root() ); release ( code ); <font color=#0000FF>return</font> table;
<span class="line_num"><font color=#e8e8e8>00</font>14 </span>}; <font color=#008000>//release()负责释放复杂结构，与算法无直接关系，具体实现详见代码包</font>
</b></p></pre>
</body>
</html>

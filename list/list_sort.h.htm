<html>
<head>
<title>list_sort.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> <font color=#0000FF>void</font> List<font color=#AA5500>&lt;</font>T&gt;::sort ( ListNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> p, Rank n ) { <font color=#008000>//列表区间排序</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span>   <font color=#0000FF>switch</font> ( rand() % 4 ) { <font color=#008000>//随机选取排序算法。可根据具体问题的特点灵活选取或扩充</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>      <font color=#0000FF>case</font> 1  : insertionSort( p, n ); <font color=#0000FF>break</font>; <font color=#008000>//插入排序</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span>      <font color=#0000FF>case</font> 2  : selectionSort( p, n ); <font color=#0000FF>break</font>; <font color=#008000>//选择排序</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>      <font color=#0000FF>case</font> 3  :     mergeSort( p, n ); <font color=#0000FF>break</font>; <font color=#008000>//归并排序</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>      <font color=#0000FF>default</font> :     radixSort( p, n ); <font color=#0000FF>break</font>; <font color=#008000>//基数排序</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>   }
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>}
</b></p></pre>
</body>
</html>

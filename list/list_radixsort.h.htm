<html>
<head>
<title>list_radixsort.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>using</font> U <font color=#AA5500>=</font> <font color=#0000FF>unsigned</font> <font color=#0000FF>int</font>; <font color=#008000>//约定：类型T或就是U；或可转换为U，并依此定序</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> <font color=#008000>//对列表中起始于位置p、宽度为n的区间做基数排序</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span><font color=#0000FF>void</font> List<font color=#AA5500>&lt;</font>T&gt;::radixSort( ListNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> p, Rank n ) { <font color=#008000>// valid(p) && Rank(p) + n &lt;= size</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>   ListNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> head <font color=#AA5500>=</font> p-<font color=#AA5500>&gt;</font>pred; <font color=#008000>//待排序区间为(head, tail)</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>   ListNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> tail <font color=#AA5500>=</font> p; <font color=#0000FF>for</font> ( Rank i <font color=#AA5500>=</font> 0; i <font color=#AA5500>&lt;</font> n; i++ ) tail <font color=#AA5500>=</font> tail-<font color=#AA5500>&gt;</font>succ;
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>   <font color=#0000FF>for</font> ( U radixBit <font color=#AA5500>=</font> 0x1; radixBit && (p <font color=#AA5500>=</font> head); radixBit <font color=#AA5500>&lt;</font><font color=#AA5500>&lt;</font>= 1 ) <font color=#008000>//以下反复地</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>      <font color=#0000FF>for</font> ( Rank i <font color=#AA5500>=</font> 0; i <font color=#AA5500>&lt;</font> n; i++ ) <font color=#008000>//根据当前基数位，将所有节点</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>         radixBit & U (p-<font color=#AA5500>&gt;</font>succ-<font color=#AA5500>&gt;</font>data) ? <font color=#008000>//分拣为后缀（1）与前缀（0）</font>
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>            insert( remove( p-<font color=#AA5500>&gt;</font>succ ), tail ) : p <font color=#AA5500>=</font> p-<font color=#AA5500>&gt;</font>succ;
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>}
</b></p></pre>
</body>
</html>

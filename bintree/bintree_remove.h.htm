<html>
<head>
<title>bintree_remove.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> <font color=#008000>//删除二叉树中位置x处的节点及其后代，返回被删除节点的数值</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span>Rank BinTree<font color=#AA5500>&lt;</font>T&gt;::remove( BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> x ) { <font color=#008000>// assert: x为二叉树中的合法位置</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>   FromParentTo( <font color=#AA5500>*</font>x ) <font color=#AA5500>=</font> NULL; <font color=#008000>//切断来自父节点的指针</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span>   updateHeightAbove( x-<font color=#AA5500>&gt;</font>parent ); <font color=#008000>//更新祖先高度</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>   Rank n <font color=#AA5500>=</font> removeAt( x ); _size <font color=#AA5500>-</font><font color=#AA5500>=</font> n; <font color=#0000FF>return</font> n; <font color=#008000>//删除子树x，更新规模，返回删除节点总数</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>}
<span class="line_num"><font color=#e8e8e8>000</font>7 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> <font color=#008000>//删除二叉树中位置x处的节点及其后代，返回被删除节点的数值</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span><font color=#0000FF>static</font> Rank removeAt( BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> x ) { <font color=#008000>// assert: x为二叉树中的合法位置</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>   <font color=#0000FF>if</font> ( !x ) <font color=#0000FF>return</font> 0; <font color=#008000>//递归基：空树</font>
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>   Rank n <font color=#AA5500>=</font> 1 <font color=#AA5500>+</font> removeAt( x-<font color=#AA5500>&gt;</font>lc ) <font color=#AA5500>+</font> removeAt( x-<font color=#AA5500>&gt;</font>rc ); <font color=#008000>//递归释放左、右子树</font>
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>   release( x-<font color=#AA5500>&gt;</font>data ); release( x ); <font color=#0000FF>return</font> n; <font color=#008000>//释放被摘除节点，并返回删除节点总数</font>
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>} <font color=#008000>// release()负责释放复杂结构，与算法无直接关系，具体实现详见代码包</font>
</b></p></pre>
</body>
</html>

<html>
<head>
<title>binnode_travpostorder_i.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> <font color=#008000>//在以S栈顶节点为根的子树中，找到最高左侧可见叶节点</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span><font color=#0000FF>static</font> <font color=#0000FF>void</font> gotoLeftmostLeaf( Stack<font color=#AA5500>&lt;</font>BinNodePosi<font color=#AA5500>&lt;</font>T&gt;&gt;& S ) { <font color=#008000>//沿途所遇节点依次入栈</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>   <font color=#0000FF>while</font> ( BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> x <font color=#AA5500>=</font> S.top() ) <font color=#008000>//自顶而下，反复检查当前节点（即栈顶）</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span>      <font color=#0000FF>if</font> ( HasLChild( <font color=#AA5500>*</font>x ) ) { <font color=#008000>//尽可能向左</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>         <font color=#0000FF>if</font> ( HasRChild( <font color=#AA5500>*</font>x ) ) S.push( x-<font color=#AA5500>&gt;</font>rc ); <font color=#008000>//若有右孩子，优先入栈</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>         S.push( x-<font color=#AA5500>&gt;</font>lc ); <font color=#008000>//然后才转至左孩子</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>      } <font color=#0000FF>else</font> <font color=#008000>//实不得已</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>         S.push( x-<font color=#AA5500>&gt;</font>rc ); <font color=#008000>//才向右</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>   S.pop(); <font color=#008000>//返回之前，弹出栈顶的空节点</font>
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>}
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>
<span class="line_num"><font color=#e8e8e8>00</font>12 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T, <font color=#0000FF>typename</font> VST<font color=#AA5500>&gt;</font>
<span class="line_num"><font color=#e8e8e8>00</font>13 </span><font color=#0000FF>void</font> travPost_I( BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> x, VST& visit ) { <font color=#008000>//二叉树的后序遍历（迭代版）</font>
<span class="line_num"><font color=#e8e8e8>00</font>14 </span>   Stack<font color=#AA5500>&lt;</font>BinNodePosi<font color=#AA5500>&lt;</font>T&gt;&gt; S; <font color=#008000>//辅助栈</font>
<span class="line_num"><font color=#e8e8e8>00</font>15 </span>   <font color=#0000FF>if</font> ( x ) S.push( x ); <font color=#008000>//根节点入栈</font>
<span class="line_num"><font color=#e8e8e8>00</font>16 </span>   <font color=#0000FF>while</font> ( !S.empty() ) { <font color=#008000>// x始终为当前节点</font>
<span class="line_num"><font color=#e8e8e8>00</font>17 </span>      <font color=#0000FF>if</font> ( S.top() != x-<font color=#AA5500>&gt;</font>parent ) <font color=#008000>////若栈顶非x之父（而为右兄）</font>
<span class="line_num"><font color=#e8e8e8>00</font>18 </span>         gotoLeftmostLeaf( S ); <font color=#008000>//则在其右兄子树中找到HLVFL（相当于递归深入）</font>
<span class="line_num"><font color=#e8e8e8>00</font>19 </span>      x <font color=#AA5500>=</font> S.pop(); visit( x-<font color=#AA5500>&gt;</font>data ); <font color=#008000>//弹出栈顶（即前一节点之后继），并访问之</font>
<span class="line_num"><font color=#e8e8e8>00</font>20 </span>   }
<span class="line_num"><font color=#e8e8e8>00</font>21 </span>}
</b></p></pre>
</body>
</html>

<html>
<head>
<title>graph_prim.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> Tv, <font color=#0000FF>typename</font> Te<font color=#AA5500>&gt;</font> <font color=#008000>//Prim算法：无向连通图，各边表示为方向互逆、权重相等的一对边</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span><font color=#0000FF>void</font> Graph<font color=#AA5500>&lt;</font>Tv, Te&gt;::prim( Rank s ) { <font color=#008000>// s &lt; n</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>   reset(); priority ( s ) <font color=#AA5500>=</font> 0;
<span class="line_num"><font color=#e8e8e8>000</font>4 </span>   <font color=#0000FF>for</font> ( Rank i <font color=#AA5500>=</font> 0; i <font color=#AA5500>&lt;</font> n; i++ ) { <font color=#008000>//共需引入n个顶点和n-1条边</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>      status( s ) <font color=#AA5500>=</font> VISITED;
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>      <font color=#0000FF>if</font> ( -1 != parent( s ) ) type( parent( s ), s ) <font color=#AA5500>=</font> TREE; <font color=#008000>//引入当前的s</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>      <font color=#0000FF>for</font> ( Rank j <font color=#AA5500>=</font> firstNbr( s ); <font color=#AA5500>-</font> 1 != j; j <font color=#AA5500>=</font> nextNbr( s, j ) ) <font color=#008000>//枚举s的所有邻居j</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>         <font color=#0000FF>if</font> ( ( status( j ) == UNDISCOVERED ) && ( priority( j ) <font color=#AA5500>&gt;</font> weight( s, j ) ) ) <font color=#008000>//对邻接顶点j做松弛</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>            { priority( j ) <font color=#AA5500>=</font> weight( s, j ); parent( j ) <font color=#AA5500>=</font> s; } <font color=#008000>//与Dijkstra算法唯一的不同之处</font>
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>      <font color=#0000FF>int</font> shortest <font color=#AA5500>=</font> INT_MAX;
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>      <font color=#0000FF>for</font> ( Rank j <font color=#AA5500>=</font> 0; j <font color=#AA5500>&lt;</font> n; j++ ) <font color=#008000>//选出下一极短跨边</font>
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>         <font color=#0000FF>if</font> ( ( status( j ) == UNDISCOVERED ) && ( shortest <font color=#AA5500>&gt;</font> priority( j ) ) )
<span class="line_num"><font color=#e8e8e8>00</font>13 </span>            { shortest <font color=#AA5500>=</font> priority( j ); s <font color=#AA5500>=</font> j; }
<span class="line_num"><font color=#e8e8e8>00</font>14 </span>   }
<span class="line_num"><font color=#e8e8e8>00</font>15 </span>}
</b></p></pre>
</body>
</html>

<html>
<head>
<title>graph.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>using</font> VStatus <font color=#AA5500>=</font> <font color=#0000FF>enum</font> { UNDISCOVERED, DISCOVERED, VISITED }; <font color=#008000>//顶点状态</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span><font color=#0000FF>using</font> EType <font color=#AA5500>=</font> <font color=#0000FF>enum</font> { UNDETERMINED, TREE, CROSS, FORWARD, BACKWARD }; <font color=#008000>//边在遍历树中所属的类型</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> Tv, <font color=#0000FF>typename</font> Te<font color=#AA5500>&gt;</font> <font color=#008000>//顶点类型、边类型</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span><font color=#0000FF>class</font> Graph { <font color=#008000>//图Graph模板类</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span><font color=#0000FF>private</font>:
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>   <font color=#0000FF>void</font> reset() { <font color=#008000>//所有顶点、边的辅助信息复位</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>      <font color=#0000FF>for</font> ( Rank v <font color=#AA5500>=</font> 0; v <font color=#AA5500>&lt;</font> n; v++ ) { <font color=#008000>//所有顶点的</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>         status( v ) <font color=#AA5500>=</font> UNDISCOVERED; dTime( v ) <font color=#AA5500>=</font> fTime( v ) <font color=#AA5500>=</font> -1; <font color=#008000>//状态，时间标签</font>
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>         parent( v ) <font color=#AA5500>=</font> -1; priority( v ) <font color=#AA5500>=</font> INT_MAX; <font color=#008000>//（在遍历树中的）父节点，优先级数</font>
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>         <font color=#0000FF>for</font> ( Rank u <font color=#AA5500>=</font> 0; u <font color=#AA5500>&lt;</font> n; u++ ) <font color=#008000>//所有边的</font>
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>            <font color=#0000FF>if</font> ( exists( v, u ) ) type( v, u ) <font color=#AA5500>=</font> UNDETERMINED; <font color=#008000>//类型</font>
<span class="line_num"><font color=#e8e8e8>00</font>13 </span>      }
<span class="line_num"><font color=#e8e8e8>00</font>14 </span>   }
<span class="line_num"><font color=#e8e8e8>00</font>15 </span>   <font color=#0000FF>void</font> BFS( Rank, Rank& ); <font color=#008000>//（连通域）广度优先搜索算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>16 </span>   <font color=#0000FF>void</font> DFS( Rank, Rank& ); <font color=#008000>//（连通域）深度优先搜索算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>17 </span>   <font color=#0000FF>void</font> BCC( Rank, Rank&, Stack<font color=#AA5500>&lt;</font>Rank&gt;& ); <font color=#008000>//（连通域）基于DFS的双连通分量分解算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>18 </span>   <font color=#0000FF>bool</font> TSort( Rank, Rank&, Stack<font color=#AA5500>&lt;</font>Tv&gt;<font color=#AA5500>*</font> ); <font color=#008000>//（连通域）基于DFS的拓扑排序算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>19 </span>   <font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> PU<font color=#AA5500>&gt;</font> <font color=#0000FF>void</font> PFS( Rank, PU ); <font color=#008000>//（连通域）优先级搜索框架</font>
<span class="line_num"><font color=#e8e8e8>00</font>20 </span><font color=#0000FF>public</font>:
<span class="line_num"><font color=#e8e8e8>00</font>21 </span><font color=#008000>// 顶点</font>
<span class="line_num"><font color=#e8e8e8>00</font>22 </span>   Rank n; <font color=#008000>//顶点总数</font>
<span class="line_num"><font color=#e8e8e8>00</font>23 </span>   <font color=#0000FF>virtual</font> Rank insert( Tv <font color=#0000FF>const</font>& ) <font color=#AA5500>=</font> 0; <font color=#008000>//插入顶点，返回编号</font>
<span class="line_num"><font color=#e8e8e8>00</font>24 </span>   <font color=#0000FF>virtual</font> Tv remove( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//删除顶点及其关联边，返回该顶点信息</font>
<span class="line_num"><font color=#e8e8e8>00</font>25 </span>   <font color=#0000FF>virtual</font> Tv& vertex( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点的数据（该顶点的确存在）</font>
<span class="line_num"><font color=#e8e8e8>00</font>26 </span>   <font color=#0000FF>virtual</font> Rank inDegree( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点的入度（该顶点的确存在）</font>
<span class="line_num"><font color=#e8e8e8>00</font>27 </span>   <font color=#0000FF>virtual</font> Rank outDegree( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点的出度（该顶点的确存在）</font>
<span class="line_num"><font color=#e8e8e8>00</font>28 </span>   <font color=#0000FF>virtual</font> Rank firstNbr( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点的首个邻接顶点</font>
<span class="line_num"><font color=#e8e8e8>00</font>29 </span>   <font color=#0000FF>virtual</font> Rank nextNbr( Rank, Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点（相对当前邻居的）下一邻居</font>
<span class="line_num"><font color=#e8e8e8>00</font>30 </span>   <font color=#0000FF>virtual</font> VStatus& status( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点的状态</font>
<span class="line_num"><font color=#e8e8e8>00</font>31 </span>   <font color=#0000FF>virtual</font> Rank& dTime( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点的时间标签dTime</font>
<span class="line_num"><font color=#e8e8e8>00</font>32 </span>   <font color=#0000FF>virtual</font> Rank& fTime( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点的时间标签fTime</font>
<span class="line_num"><font color=#e8e8e8>00</font>33 </span>   <font color=#0000FF>virtual</font> Rank& parent( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点在遍历树中的父亲</font>
<span class="line_num"><font color=#e8e8e8>00</font>34 </span>   <font color=#0000FF>virtual</font> <font color=#0000FF>int</font>& priority( Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//顶点在遍历树中的优先级数</font>
<span class="line_num"><font color=#e8e8e8>00</font>35 </span><font color=#008000>// 边：这里约定，无向边均统一转化为方向互逆的一对有向边，从而将无向图视作有向图的特例</font>
<span class="line_num"><font color=#e8e8e8>00</font>36 </span>   Rank e; <font color=#008000>//边总数</font>
<span class="line_num"><font color=#e8e8e8>00</font>37 </span>   <font color=#0000FF>virtual</font> <font color=#0000FF>bool</font> exists( Rank, Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//边(v, u)是否存在</font>
<span class="line_num"><font color=#e8e8e8>00</font>38 </span>   <font color=#0000FF>virtual</font> <font color=#0000FF>void</font> insert( Te <font color=#0000FF>const</font>&, <font color=#0000FF>int</font>, Rank, Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//在两个顶点之间插入指定权重的边</font>
<span class="line_num"><font color=#e8e8e8>00</font>39 </span>   <font color=#0000FF>virtual</font> Te remove( Rank, Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//删除一对顶点之间的边，返回该边信息</font>
<span class="line_num"><font color=#e8e8e8>00</font>40 </span>   <font color=#0000FF>virtual</font> EType& type( Rank, Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//边的类型</font>
<span class="line_num"><font color=#e8e8e8>00</font>41 </span>   <font color=#0000FF>virtual</font> Te& edge( Rank, Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//边的数据（该边的确存在）</font>
<span class="line_num"><font color=#e8e8e8>00</font>42 </span>   <font color=#0000FF>virtual</font> <font color=#0000FF>int</font>& weight( Rank, Rank ) <font color=#AA5500>=</font> 0; <font color=#008000>//边(v, u)的权重</font>
<span class="line_num"><font color=#e8e8e8>00</font>43 </span><font color=#008000>// 算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>44 </span>   <font color=#0000FF>void</font> bfs( Rank ); <font color=#008000>//广度优先搜索算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>45 </span>   <font color=#0000FF>void</font> dfs( Rank ); <font color=#008000>//深度优先搜索算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>46 </span>   <font color=#0000FF>void</font> bcc( Rank ); <font color=#008000>//基于DFS的双连通分量分解算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>47 </span>   Stack<font color=#AA5500>&lt;</font>Tv&gt;<font color=#AA5500>*</font> tSort( Rank ); <font color=#008000>//基于DFS的拓扑排序算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>48 </span>   <font color=#0000FF>void</font> prim( Rank ); <font color=#008000>//最小支撑树Prim算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>49 </span>   <font color=#0000FF>void</font> dijkstra( Rank ); <font color=#008000>//最短路径Dijkstra算法</font>
<span class="line_num"><font color=#e8e8e8>00</font>50 </span>   <font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> PU<font color=#AA5500>&gt;</font> <font color=#0000FF>void</font> pfs( Rank, PU ); <font color=#008000>//优先级搜索框架</font>
<span class="line_num"><font color=#e8e8e8>00</font>51 </span>};
</b></p></pre>
</body>
</html>

<html>
<head>
<title>graph_tsort.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> Tv, <font color=#0000FF>typename</font> Te<font color=#AA5500>&gt;</font> <font color=#008000>//基于DFS的拓扑排序算法</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span>Stack<font color=#AA5500>&lt;</font>Tv&gt;<font color=#AA5500>*</font> Graph<font color=#AA5500>&lt;</font>Tv, Te&gt;::tSort( Rank s ) { <font color=#008000>// assert: 0 &lt;= s &lt; n</font>
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>   reset(); Rank clock <font color=#AA5500>=</font> 0; <font color=#008000>//全图复位</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span>   Stack<font color=#AA5500>&lt;</font>Tv&gt;<font color=#AA5500>*</font> S <font color=#AA5500>=</font> <font color=#0000FF>new</font> Stack<font color=#AA5500>&lt;</font>Tv&gt;; <font color=#008000>//用栈记录排序顶点</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>   <font color=#0000FF>for</font> ( Rank v <font color=#AA5500>=</font> s; v <font color=#AA5500>&lt;</font> s <font color=#AA5500>+</font> n; v++ ) <font color=#008000>//从s起顺次检查所有顶点</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>      <font color=#0000FF>if</font> ( UNDISCOVERED == status( v % n ) ) <font color=#008000>//一旦遇到尚未发现者</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>         <font color=#0000FF>if</font> ( !TSort( v, clock, S ) ) { <font color=#008000>//即从它出发启动一次TSort</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>            <font color=#0000FF>while</font> ( !S-<font color=#AA5500>&gt;</font>empty() ) <font color=#008000>//任一连通域（亦即整图）非DAG</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>               S-<font color=#AA5500>&gt;</font>pop();
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>            <font color=#0000FF>break</font>; <font color=#008000>//则不必继续计算，故直接返回</font>
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>         }
<span class="line_num"><font color=#e8e8e8>00</font>12 </span>   <font color=#0000FF>return</font> S; <font color=#008000>//若输入为DAG，则S内各顶点自顶向底排序；否则（不存在拓扑排序），S空</font>
<span class="line_num"><font color=#e8e8e8>00</font>13 </span>} <font color=#008000>//如此可完整覆盖全图，且总体复杂度依然保持为O(n+e)</font>
<span class="line_num"><font color=#e8e8e8>00</font>14 </span>
<span class="line_num"><font color=#e8e8e8>00</font>15 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> Tv, <font color=#0000FF>typename</font> Te<font color=#AA5500>&gt;</font> <font color=#008000>//基于DFS的拓扑排序算法（单趟）</font>
<span class="line_num"><font color=#e8e8e8>00</font>16 </span><font color=#0000FF>bool</font> Graph<font color=#AA5500>&lt;</font>Tv, Te&gt;::TSort( Rank v, Rank& clock, Stack<font color=#AA5500>&lt;</font>Tv&gt;<font color=#AA5500>*</font> S ) { <font color=#008000>// v &lt; n</font>
<span class="line_num"><font color=#e8e8e8>00</font>17 </span>   dTime( v ) <font color=#AA5500>=</font> ++clock; status( v ) <font color=#AA5500>=</font> DISCOVERED; <font color=#008000>//发现顶点v</font>
<span class="line_num"><font color=#e8e8e8>00</font>18 </span>   <font color=#0000FF>for</font> ( Rank u <font color=#AA5500>=</font> firstNbr( v ); <font color=#AA5500>-</font> 1 != u; u <font color=#AA5500>=</font> nextNbr( v, u ) ) <font color=#008000>//枚举v的所有邻居u</font>
<span class="line_num"><font color=#e8e8e8>00</font>19 </span>      <font color=#0000FF>switch</font> ( status( u ) ) { <font color=#008000>//并视u的状态分别处理</font>
<span class="line_num"><font color=#e8e8e8>00</font>20 </span>         <font color=#0000FF>case</font> UNDISCOVERED :
<span class="line_num"><font color=#e8e8e8>00</font>21 </span>            parent( u ) <font color=#AA5500>=</font> v; type( v, u ) <font color=#AA5500>=</font> TREE;
<span class="line_num"><font color=#e8e8e8>00</font>22 </span>            <font color=#0000FF>if</font> ( !TSort( u, clock, S ) ) <font color=#008000>//从顶点u处出发深入搜索</font>
<span class="line_num"><font color=#e8e8e8>00</font>23 </span>               <font color=#0000FF>return</font> <font color=#0000FF>false</font>; <font color=#008000>//若u及其后代不能拓扑排序（则全图亦必如此），故返回并报告</font>
<span class="line_num"><font color=#e8e8e8>00</font>24 </span>            <font color=#0000FF>break</font>;
<span class="line_num"><font color=#e8e8e8>00</font>25 </span>         <font color=#0000FF>case</font> DISCOVERED :
<span class="line_num"><font color=#e8e8e8>00</font>26 </span>            type( v, u ) <font color=#AA5500>=</font> BACKWARD; <font color=#008000>//一旦发现后向边（非DAG），则</font>
<span class="line_num"><font color=#e8e8e8>00</font>27 </span>            <font color=#0000FF>return</font> <font color=#0000FF>false</font>; <font color=#008000>//不必深入，故返回并报告</font>
<span class="line_num"><font color=#e8e8e8>00</font>28 </span>         <font color=#0000FF>default</font> : <font color=#008000>// VISITED (digraphs only)</font>
<span class="line_num"><font color=#e8e8e8>00</font>29 </span>            type( v, u ) <font color=#AA5500>=</font> ( dTime( v ) <font color=#AA5500>&lt;</font> dTime( u ) ) ? FORWARD : CROSS;
<span class="line_num"><font color=#e8e8e8>00</font>30 </span>            <font color=#0000FF>break</font>;
<span class="line_num"><font color=#e8e8e8>00</font>31 </span>      }
<span class="line_num"><font color=#e8e8e8>00</font>32 </span>   status( v ) <font color=#AA5500>=</font> VISITED; S-<font color=#AA5500>&gt;</font>push( vertex( v ) ); <font color=#008000>//顶点被标记为VISITED时，随即入栈</font>
<span class="line_num"><font color=#e8e8e8>00</font>33 </span>   <font color=#0000FF>return</font> <font color=#0000FF>true</font>; <font color=#008000>// v及其后代可以拓扑排序</font>
<span class="line_num"><font color=#e8e8e8>00</font>34 </span>}
</b></p></pre>
</body>
</html>

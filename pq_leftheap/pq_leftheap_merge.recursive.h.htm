<html>
<head>
<title>pq_leftheap_merge.recursive.h</title>
<meta http-equiv="content-type" content="text/html; charset=GBK">
<style type="text/css">
<!--.line_num {color: #666666; background-color: #E8E8E8;}//-->
</style>
</head>
<body bgcolor=#FFFFFF text=#000000>
<pre style="font: 16pt consolas, 微软雅黑;"><b><p style="line-height: 150%">
<span class="line_num"><font color=#e8e8e8>000</font>1 </span><font color=#0000FF>template</font> <font color=#AA5500>&lt;</font><font color=#0000FF>typename</font> T<font color=#AA5500>&gt;</font> <font color=#008000>//合并以a和b为根节点的两个左式堆（递归版）</font>
<span class="line_num"><font color=#e8e8e8>000</font>2 </span>BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> merge( BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> a, BinNodePosi<font color=#AA5500>&lt;</font>T<font color=#AA5500>&gt;</font> b ) {
<span class="line_num"><font color=#e8e8e8>000</font>3 </span>   <font color=#0000FF>if</font> ( !a ) <font color=#0000FF>return</font> b; <font color=#008000>//退化情况</font>
<span class="line_num"><font color=#e8e8e8>000</font>4 </span>   <font color=#0000FF>if</font> ( !b ) <font color=#0000FF>return</font> a; <font color=#008000>//退化情况</font>
<span class="line_num"><font color=#e8e8e8>000</font>5 </span>   <font color=#0000FF>if</font> ( lt( a-<font color=#AA5500>&gt;</font>data, b-<font color=#AA5500>&gt;</font>data ) ) swap( a, b ); <font color=#008000>//确保a&gt;=b</font>
<span class="line_num"><font color=#e8e8e8>000</font>6 </span>   ( a-<font color=#AA5500>&gt;</font>rc <font color=#AA5500>=</font> merge( a-<font color=#AA5500>&gt;</font>rc, b ) )<font color=#AA5500>-</font><font color=#AA5500>&gt;</font>parent <font color=#AA5500>=</font> a; <font color=#008000>//将a的右子堆，与b合并</font>
<span class="line_num"><font color=#e8e8e8>000</font>7 </span>   <font color=#0000FF>if</font> ( !a-<font color=#AA5500>&gt;</font>lc || ( a-<font color=#AA5500>&gt;</font>lc-<font color=#AA5500>&gt;</font>npl <font color=#AA5500>&lt;</font> a-<font color=#AA5500>&gt;</font>rc-<font color=#AA5500>&gt;</font>npl ) ) <font color=#008000>//若有必要</font>
<span class="line_num"><font color=#e8e8e8>000</font>8 </span>      swap( a-<font color=#AA5500>&gt;</font>lc, a-<font color=#AA5500>&gt;</font>rc ); <font color=#008000>//交换a的左、右子堆，以确保右子堆的npl不大</font>
<span class="line_num"><font color=#e8e8e8>000</font>9 </span>   a-<font color=#AA5500>&gt;</font>npl <font color=#AA5500>=</font> a-<font color=#AA5500>&gt;</font>rc ? a-<font color=#AA5500>&gt;</font>rc-<font color=#AA5500>&gt;</font>npl <font color=#AA5500>+</font> 1 : 1; <font color=#008000>//更新a的npl</font>
<span class="line_num"><font color=#e8e8e8>00</font>10 </span>   <font color=#0000FF>return</font> a; <font color=#008000>//返回合并后的堆顶</font>
<span class="line_num"><font color=#e8e8e8>00</font>11 </span>} <font color=#008000>//本算法只实现结构上的合并，堆的规模须由上层调用者负责更新</font>
</b></p></pre>
</body>
</html>
